---
title: "深入理解闭包"
layout: post
date: 2019-06-11 15:00
image: /assets/images/markdown.jpg
headerImage: false
tag:
    - markdown
    - elements
star: false
category: blog
author: Lens
description: js基础之闭包
---

## 闭包是什么？

### 1、作用域

要理解闭包，首先要了解作用域，javascript 有两种作用域：全局作用域和函数作用域。函数内部会形成一个私有的作用域，函数内部可以读取全局变量，但是外部无法读取函数内部变量。

### 2、如何在外部读取函数内部的变量呢

函数外部是无法直接读取函数内部变量的，但是函数内部可以读取外部的所有变量。所以可以通过在函数内部嵌套一个子函数，子函数可以读取父函数中的所有变量

```
function fn1() {
  var n = 1;
  function fn2() {
    console.log(n);
  }
  return f2;
}

var result = fn1();
result(); // 1
```

### 3、关于闭包的定义

-   关于闭包的定义市面上一般认为是：“定义在一个函数内部的函数，内部的函数可以访问外部函数中的变量”。
-   而我觉得闭包其实是一种机制，而不是具体的函数或者方法。

## 闭包的作用？

### 1、读取函数内部私有变量

### 2、保护和保存

函数执行会形成一个私有上下文，此上下文可以保护里面的私有变量不受外界干扰，并且如果当前上下文中的变量被上下文以外的内容所占用，当前上下文是不会被浏览器的垃圾回收机制释放掉的，这样起到了一种保存变量的作用

```
function createIncrementor(start) {
  return function () {
    return start++;
  };
}

var inc = createIncrementor(5);

inc() // 5
inc() // 6
inc() // 7
```

### 3、封装私有属性和方法

```
function Cache() {
  let cacheMap;
  function setCache(key,value) {
    cacheMap[key] = value;
  }
  function getCache(key) {
    return cacheMap[key];
  }

  return {
    setCache,
    getCache
  };
}
const C = Cache();
C.setCache("a", "123")
C.getCache("a") // 123
```

## 闭包的缺点

闭包会形成不被释放的上下文，占用栈内存空间，大量使用会导致页面渲染变慢，所以要合理使用

## 基于闭包的一些高阶编程技巧

### 惰性函数

例如写一个兼容各版本浏览器的事件绑定方法：

```
function addEvent (type, element, fun) {
    if (element.addEventListener) {
        element.addEventListener(type, fun, false);
    }
    else if(element.attachEvent){
        element.attachEvent('on' + type, fun);
    }
    else{
        element['on' + type] = fun;
    }
}
addEvent("click",xxx,function(){})
addEvent("click",xxx,function(){})
addEvent("click",xxx,function(){})
```

上面方法虽然实现了功能，多次调用的话，每次都会执行一遍兼容判断，而实际上在同一个浏览器中只需要判断一次就可以了，改写：

```
function addEvent (type, element, fun) {
    if (element.addEventListener) {
        addEvent = function (type, element, fun) {
            element.addEventListener(type, fun, false);
        }
    }
    else if(element.attachEvent){
        addEvent = function (type, element, fun) {
            element.attachEvent('on' + type, fun);
        }
    }
    else{
        addEvent = function (type, element, fun) {
            element['on' + type] = fun;
        }
    }
    addEvent(type, element, fun);
}
```

在第一次执行完之后，我们重构了 addEvent 方法，后边再执行就不会再做兼容判断。

### 柯里化函数

```
function(x,y){
    return function(z){
        return x+y+z
    }
}
const res = fn(1,2)(3)
console.log(res) // 1+2+3 => 6
```

-   currying 函数的实质其实就是预先存储的概念，利用了闭包的特性来保存中间过程中输入的参数
-   第一次执行函数，形成一个临时不被释放的上下文(闭包)，在闭包中我们保存下来传递的参数信息，当后期执行小函数的时候，可以基于作用域链机制，找到闭包中存储的信息，并且拿来使用，所以形成的闭包类似于预先把一些信息进行存储

### compose 函数

```
function compose(...funcs){
    return function anoymous(val){
        if(funcs.length===0){
            return val;
        }
        if(funcs.length===1){
            return funcs[0](val)
        }
        return funcs.reverse().reduce((N,item)=>item(N),val)
    }
}
const except=(x)=>x/1000;
const result = compose(except,parseInt)(500.5) // 先取整再除以1000
console.log(result) // 0.5
```
